{
	"info": {
		"name": "serverless-methods-multi-tenant",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [

	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JWT}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "83d463fa-b8c5-4c80-aec0-c95b95bb6247",
				"type": "text/javascript",
				"exec": [
					"function base64url(source) {",
					"  // Encode in classical base64",
					"  let encodedSource = CryptoJS.enc.Base64.stringify(source);",
					"",
					"  // Remove padding equal characters",
					"  encodedSource = encodedSource.replace(/=+$/, '');",
					"",
					"  // Replace characters according to base64url specifications",
					"  encodedSource = encodedSource.replace(/\\+/g, '-');",
					"  encodedSource = encodedSource.replace(/\\//g, '_');",
					"",
					"  return encodedSource;",
					"}",
					"",
					"function addIAT() {",
					"  return Math.floor(Date.now() / 1000) + 257;",
					"}",
					"",
					"const header = {",
					"  typ: 'JWT',",
					"  alg: 'HS256',",
					"};",
					"",
					"const jwtBody = {",
					"  iss: pm.environment.get('API_ISSUER'),",
					"  iat: addIAT(),",
					"};",
					"",
					"const secret = atob(pm.environment.get('API_KEY'));",
					"",
					"// encode header",
					"const stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
					"const encodedHeader = base64url(stringifiedHeader);",
					"",
					"// encode jwtBody",
					"const stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(jwtBody));",
					"const encodedData = base64url(stringifiedData);",
					"",
					"// build token",
					"const token = `${encodedHeader}.${encodedData}`;",
					"",
					"// sign token",
					"let signature = CryptoJS.HmacSHA256(token, secret);",
					"signature = base64url(signature);",
					"const signedToken = `${token}.${signature}`;",
					"",
					"postman.setEnvironmentVariable('JWT', signedToken);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
